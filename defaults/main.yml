---
# Install 389-ds
dirsrv_fqdn: "{{ ansible_fqdn }}"

dirsrv_hostname: "{{ dirsrv_fqdn.split('.')[0] }}"
dirsrv_suffix: "dc={{ dirsrv_fqdn.split('.')[-2] | default(389) }},dc={{ dirsrv_fqdn.split('.')[-1] }}"

dirsrv_password: not_set_yet

dirsrv_rootdn: "cn=Directory Manager"
dirsrv_rootdn_password: "{{ dirsrv_password }}"

dirsrv_serverid: default
# Don't touch this! It seems to hardcode
dirsrv_instance_dir: "/var/lib/dirsrv/slapd-{{ dirsrv_serverid }}"

# Administration server
dirsrv_admin_port: 9830
dirsrv_admin_password: "{{ dirsrv_password }}"
dirsrv_admin_domain: "{{ dirsrv_fqdn.split('.')[1:] | join('.') }}"

dirsrv_install_examples: false
dirsrv_install_additional_ldif: []

# Logging

dirsrv_logging:
  audit:
    enabled: false
    logrotationtimeunit: day
    logmaxdiskspace: 400
    maxlogsize: 200
    maxlogsperdir: 7
    mode: 600
  access:
    enabled: true
    logrotationtimeunit: day
    logmaxdiskspace: 400
    maxlogsize: 200
    maxlogsperdir: 7
    mode: 600
  error:
    enabled: true
    logrotationtimeunit: day
    logmaxdiskspace: 400
    maxlogsize: 200
    maxlogsperdir: 7
    mode: 600

# Plugins

# If you want to enable or disable
# cn=MemberOf Plugin,cn=plugins,cn=config
# add the cn part to the list, like so:
# MemberOf Plugin: true
# true for enabled, false for disabled.
#
# This is a valid example:
# plugins_enabled:
#   MemberOf Plugin: true
#   Distributed Numeric Assignment Plugin: false
#
# And this is just the empty array syntax, override it as above
# if you need to enable or disable plugins:
dirsrv_plugins_enabled: {}

# Ansible doesn't merge dicts by default, i.e. if you want to
# change only uid_max and gid_max you have to define the _min
# variables too. When you define dna_plugin, it replaces this
# default dict entirely.
# This configuration is only applied if "Distributed Numeric Assignment Plugin" is true in plugins_enabled, and is removed when it is false. If it's not mentioned, nothing is done.
dirsrv_dna_plugin:
  gid_min: 2000
  gid_max: 2999
  uid_min: 2000
  uid_max: 2999

# Schema

dirsrv_custom_schema: []
dirsrv_allow_other_schema_files: false

# Security

dirsrv_tls_enabled: false
dirsrv_tls_min_version: '1.2'
#dirsrv_tls_cert_file: example_cert.pem
#dirsrv_tls_key_file: example.key
#dirsrv_tls_files_remote: false # True if the files are already on remote host (e.g. provided by certbot)
dirsrv_tls_certificate_trusted: true # Or false if self-signed
# If you want to avoid plain LDAP and enforce TLS, also consider these settings:
dirsrv_tls_enforced: false
dirsrv_tls_minssf: 256
dirsrv_allow_anonymous_binds: 'rootdse'
#dirsrv_allow_anonymous_binds: false
dirsrv_simple_auth_enabled: true
# Nothing to do with TLS, but for improved security you may consider:
dirsrv_password_storage_scheme: []
# even though the default password storage scheme is already strong enough.

# It's already off by default
# allow_unauthenticated_binds: false

# Other

dirsrv_ldapi_enabled: false
dirsrv_sasl_plain_enabled: true
dirsrv_update_cert_db: true
# Display supported cipher suites:
# ldapsearch -xLLL -H ldap://server.example.com:389 -D "cn=Directory Manager" -W -b 'cn=encryption,cn=config' -s base nsSSLSupportedCiphers -o ldif-wrap=no dn: cn=encryption,cn=config

# Display enabled cipher suites:
# ldapsearch -xLLL -H ldap://localhost -D "cn=Directory Manager" -W -b 'cn=encryption,cn=config' -s base nsSSLEnabledCiphers -o ldif-wrap=no
