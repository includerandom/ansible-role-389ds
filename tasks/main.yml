---
# Include variables and define needed variables
- name: Include OS specific vars
  include_vars: "{{ item }}"
  with_first_found:
    - files:
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_release }}.yml"
        - "{{ ansible_distribution|lower }}-{{ ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_distribution|lower }}.yml"
        - "{{ ansible_os_family|lower }}-{{ ansible_distribution_major_version|lower|replace('/', '_') }}.yml"
        - "{{ ansible_os_family|lower }}.yml"
      ignore: true

# TODO: cn=config contains nsslapd-requiresrestart, a list of things that need a restart. Check that all of them have "notify: dirsrv restart"...

# TODO: are nsCertFile and nsKeyFile still allowed, instead of the NSS database which is nearly impossible to handle correctly?
# https://www.port389.org/docs/389ds/howto/howto-ssl.html

- include_tasks: install_389ds.yml

- name: Check that tls_enforced makes sense
  assert:
    that:
      - dirsrv_tls_enabled
    msg: "dirsrv_tls_enforced: true doesn't make sense when dirsrv_tls_enabled: false, enable TLS or disable enforcing"
  when: dirsrv_tls_enforced | bool
  tags: [ dirsrv_tls ]

- name: Check if TLS is enforced (secure binds)
  command: "grep \"nsslapd-require-secure-binds: on\" /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif"
  register: dirsrv_tls_enforced_initially_binds
  changed_when: false
  failed_when: dirsrv_tls_enforced_initially_binds.rc != 0 and dirsrv_tls_enforced_initially_binds.rc != 1
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

# If nsslapd-minssf isn't set at all, it defaults to 0.
# So we have to check if it's defined...
- name: Check if TLS is enforced (minimum SSF is set)
  command: "grep \"nsslapd-minssf:\" /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif"
  register: dirsrv_tls_enforced_initially_ssf_set
  changed_when: false
  failed_when: dirsrv_tls_enforced_initially_ssf_set.rc != 0 and dirsrv_tls_enforced_initially_ssf_set.rc != 1
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

# ...and if it's 0 or something else.
- name: Check if TLS is enforced (minimum SSF)
  command: "grep \"nsslapd-minssf: 0\" /etc/dirsrv/slapd-{{ dirsrv_serverid }}/dse.ldif"
  register: dirsrv_tls_enforced_initially_ssf
  changed_when: false
  failed_when: dirsrv_tls_enforced_initially_ssf.rc != 0 and dirsrv_tls_enforced_initially_ssf.rc != 1
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

- name: Prepare LDAP auth data
  set_fact:
    dirsrv_ldap_auth:
      server_uri: "ldap://localhost"
      validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
      # LDAPI or binding port 389 without STARTTLS will fail, if TLS
      # is enforced. But we can't bind on port 636 or use STARTTLS
      # without checking: when the server has been just installed, no
      # certificates and no TLS are available.
      # The condition checks "secure-binds is on (found) OR minssf is not 0 (is set and is not 0)"
      start_tls: "{{ dirsrv_tls_enforced_initially_binds.rc == 0 or (dirsrv_tls_enforced_initially_ssf_set.rc == 0 and dirsrv_tls_enforced_initially_ssf.rc == 1) }}"
      bind_dn: "{{ dirsrv_rootdn }}"
      bind_pw: "{{ dirsrv_rootdn_password }}"
    # Cannot override a single parameter, so if the TLS enforcing
    # state changes during the play, we need another set of auth
    # parameters just to switch a boolean...
    dirsrv_ldap_auth_later:
      server_uri: "ldap://localhost"
      validate_certs: "{{ dirsrv_tls_certificate_trusted }}"
      start_tls: "{{ dirsrv_tls_enforced }}"
      bind_dn: "{{ dirsrv_rootdn }}"
      bind_pw: "{{ dirsrv_rootdn_password }}"
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]  # Needed for all these tags

# config
- include_tasks: configure_authentication.yml

- include_tasks: configure_logging.yml

- include_tasks: configure_plugins.yml

- include_tasks: configure_schema.yml

- include_tasks: configure_tls.yml

- include_tasks: configure_tls_enforcing.yml

- include_tasks: update_cert_in_db.yml

# Restart server and/or reload schema, to enable TLS and schema changes.
- meta: flush_handlers
  tags: [ dirsrv_tls, dirsrv_cert, dirsrv_schema ]
...
